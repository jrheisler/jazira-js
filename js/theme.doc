**Jazira-JS: Theme Class Usage Guide**

The `Theme` class in Jazira-JS centralizes the visual styling of widgets and islands. It enables consistent UI theming through named color palettes, built-in spacing, font management, and DOM-level styling â€” all without requiring CSS knowledge from the developer.

---

### ðŸŽ¨ Palettes

Palettes are named color sets that control all visual styling. Available palettes include:

* `aurora` (default)
* `desert`
* `horizon`

Each palette defines:

* `background`
* `foreground`
* `primary`
* `secondary`
* `accent`
* `danger`

---

### ðŸš€ Usage

#### Apply global styles:

```js
const theme = new Theme();
theme.applyGlobalStyles();
```

#### Switch active palette:

```js
theme.switchPalette('desert');
```

This updates all global styles to use the new palette.

---

### ðŸ§© Styling Elements

Use `styleElement()` to apply widget-specific styles:

```js
theme.styleElement(myElement);
```

Optionally use a specific palette:

```js
theme.styleElement(myElement, {}, 'horizon');
```

Or override any style inline:

```js
theme.styleElement(myElement, { backgroundColor: '#FF0000' });
```

---

### ðŸ“¦ Defaults

#### Spacing

```js
theme.spacing.padding; // '10px'
theme.spacing.margin;  // '8px'
```

#### Fonts

```js
theme.fonts.base;      // 'system-ui, sans-serif'
theme.fonts.monospace; // 'monospace'
```

---

### ðŸ“˜ Summary

* Switch themes with `switchPalette()`
* Auto-style DOM elements with `styleElement()`
* Global styles apply automatically
* No CSS authoring required by developers

With Jazira-JS theming, the look and feel of your application remains clean, consistent, and designer-friendly â€” all from JavaScript.
